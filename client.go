// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Secret_authScopes = "secret_auth.Scopes"
)

// Defines values for ApiResponseCode.
const (
	InvalidLabelName  ApiResponseCode = "invalid_label_name"
	InvalidLabelValue ApiResponseCode = "invalid_label_value"
	InvalidName       ApiResponseCode = "invalid_name"
	Ok                ApiResponseCode = "ok"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    ApiResponseCode `json:"code"`
	Message string          `json:"message"`
}

// ApiResponseCode defines model for ApiResponse.Code.
type ApiResponseCode string

// CommonSecretProperties defines model for CommonSecretProperties.
type CommonSecretProperties struct {
	// Description The human readable description of the secret.
	Description string `json:"description"`

	// Labels Key-value pairs associated with the secret.
	Labels []Label `json:"labels"`

	// Name The name of the secret. Immutable after creation.
	Name string `json:"name"`
}

// DecryptedSecret defines model for DecryptedSecret.
type DecryptedSecret struct {
	// CreatedAt The timestamp of secret creation.
	CreatedAt int64 `json:"created_at,omitempty"`

	// CreatedBy The ID of the user who created the secret.
	CreatedBy string `json:"created_by,omitempty"`

	// Description The human readable description of the secret.
	Description string `json:"description"`

	// Labels Key-value pairs associated with the secret.
	Labels []Label `json:"labels"`

	// ModifiedAt The timestamp of the last secret modification.
	ModifiedAt int64 `json:"modified_at,omitempty"`

	// Name The name of the secret. Immutable after creation.
	Name string `json:"name"`

	// OrgId The ID of the organization the secret belongs to.
	OrgId int64 `json:"org_id,omitempty"`

	// Plaintext The secret value.
	Plaintext string `json:"plaintext,omitempty"`

	// StackId The ID of the stack the secret belongs to.
	StackId int64 `json:"stack_id,omitempty"`

	// Uuid The unique ID of the secret.
	Uuid openapi_types.UUID `json:"uuid,omitempty"`
}

// Label defines model for Label.
type Label struct {
	// Name The name of the label.
	Name string `json:"name"`

	// Value The value of the label.
	Value string `json:"value"`
}

// Secret defines model for Secret.
type Secret struct {
	// Description The human readable description of the secret.
	Description string `json:"description"`

	// Labels Key-value pairs associated with the secret.
	Labels []Label `json:"labels"`

	// Name The name of the secret. Immutable after creation.
	Name string `json:"name"`

	// Plaintext The secret value. Only used for creation and update, never returned.
	Plaintext *string `json:"plaintext,omitempty"`
}

// SecretMetadata defines model for SecretMetadata.
type SecretMetadata struct {
	// CreatedAt The timestamp of secret creation.
	CreatedAt int64 `json:"created_at,omitempty"`

	// CreatedBy The ID of the user who created the secret.
	CreatedBy string `json:"created_by,omitempty"`

	// ModifiedAt The timestamp of the last secret modification.
	ModifiedAt int64 `json:"modified_at,omitempty"`

	// OrgId The ID of the organization the secret belongs to.
	OrgId int64 `json:"org_id,omitempty"`

	// StackId The ID of the stack the secret belongs to.
	StackId int64 `json:"stack_id,omitempty"`

	// Uuid The unique ID of the secret.
	Uuid openapi_types.UUID `json:"uuid,omitempty"`
}

// SecretWithMetadata defines model for SecretWithMetadata.
type SecretWithMetadata struct {
	// CreatedAt The timestamp of secret creation.
	CreatedAt int64 `json:"created_at,omitempty"`

	// CreatedBy The ID of the user who created the secret.
	CreatedBy string `json:"created_by,omitempty"`

	// Description The human readable description of the secret.
	Description string `json:"description"`

	// Labels Key-value pairs associated with the secret.
	Labels []Label `json:"labels"`

	// ModifiedAt The timestamp of the last secret modification.
	ModifiedAt int64 `json:"modified_at,omitempty"`

	// Name The name of the secret. Immutable after creation.
	Name string `json:"name"`

	// OrgId The ID of the organization the secret belongs to.
	OrgId int64 `json:"org_id,omitempty"`

	// StackId The ID of the stack the secret belongs to.
	StackId int64 `json:"stack_id,omitempty"`

	// Uuid The unique ID of the secret.
	Uuid openapi_types.UUID `json:"uuid,omitempty"`
}

// SecretsWithMetadata defines model for SecretsWithMetadata.
type SecretsWithMetadata struct {
	Secrets []SecretWithMetadata `json:"secrets"`
}

// SucessfulOperation defines model for SucessfulOperation.
type SucessfulOperation = ApiResponse

// AddSecretJSONRequestBody defines body for AddSecret for application/json ContentType.
type AddSecretJSONRequestBody = Secret

// UpdateSecretJSONRequestBody defines body for UpdateSecret for application/json ContentType.
type UpdateSecretJSONRequestBody = Secret

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListSecrets request
	ListSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSecretWithBody request with any body
	AddSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSecret(ctx context.Context, body AddSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSecretsByLabels request
	FindSecretsByLabels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecret request
	DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretById request
	GetSecretById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSecretWithBody request with any body
	UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSecret(ctx context.Context, id string, body UpdateSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecryptSecretById request
	DecryptSecretById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSecret(ctx context.Context, body AddSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSecretsByLabels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSecretsByLabelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecret(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecret(ctx context.Context, id string, body UpdateSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecryptSecretById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecryptSecretByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListSecretsRequest generates requests for ListSecrets
func NewListSecretsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddSecretRequest calls the generic AddSecret builder with application/json body
func NewAddSecretRequest(server string, body AddSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewAddSecretRequestWithBody generates requests for AddSecret with any type of body
func NewAddSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindSecretsByLabelsRequest generates requests for FindSecretsByLabels
func NewFindSecretsByLabelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/find_by_labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSecretRequest generates requests for DeleteSecret
func NewDeleteSecretRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretByIdRequest generates requests for GetSecretById
func NewGetSecretByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecretRequest calls the generic UpdateSecret builder with application/json body
func NewUpdateSecretRequest(server string, id string, body UpdateSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecretRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSecretRequestWithBody generates requests for UpdateSecret with any type of body
func NewUpdateSecretRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDecryptSecretByIdRequest generates requests for DecryptSecretById
func NewDecryptSecretByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets/%s/decrypt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListSecretsWithResponse request
	ListSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error)

	// AddSecretWithBodyWithResponse request with any body
	AddSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSecretResponse, error)

	AddSecretWithResponse(ctx context.Context, body AddSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSecretResponse, error)

	// FindSecretsByLabelsWithResponse request
	FindSecretsByLabelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindSecretsByLabelsResponse, error)

	// DeleteSecretWithResponse request
	DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error)

	// GetSecretByIdWithResponse request
	GetSecretByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretByIdResponse, error)

	// UpdateSecretWithBodyWithResponse request with any body
	UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error)

	UpdateSecretWithResponse(ctx context.Context, id string, body UpdateSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error)

	// DecryptSecretByIdWithResponse request
	DecryptSecretByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DecryptSecretByIdResponse, error)
}

type ListSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretsWithMetadata
}

// Status returns HTTPResponse.Status
func (r ListSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecretWithMetadata
}

// Status returns HTTPResponse.Status
func (r AddSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSecretsByLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretsWithMetadata
}

// Status returns HTTPResponse.Status
func (r FindSecretsByLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSecretsByLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SucessfulOperation
}

// Status returns HTTPResponse.Status
func (r DeleteSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretWithMetadata
}

// Status returns HTTPResponse.Status
func (r GetSecretByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SecretWithMetadata
}

// Status returns HTTPResponse.Status
func (r UpdateSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecryptSecretByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DecryptedSecret
}

// Status returns HTTPResponse.Status
func (r DecryptSecretByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecryptSecretByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListSecretsWithResponse request returning *ListSecretsResponse
func (c *ClientWithResponses) ListSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSecretsResponse, error) {
	rsp, err := c.ListSecrets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretsResponse(rsp)
}

// AddSecretWithBodyWithResponse request with arbitrary body returning *AddSecretResponse
func (c *ClientWithResponses) AddSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSecretResponse, error) {
	rsp, err := c.AddSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSecretResponse(rsp)
}

func (c *ClientWithResponses) AddSecretWithResponse(ctx context.Context, body AddSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSecretResponse, error) {
	rsp, err := c.AddSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSecretResponse(rsp)
}

// FindSecretsByLabelsWithResponse request returning *FindSecretsByLabelsResponse
func (c *ClientWithResponses) FindSecretsByLabelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindSecretsByLabelsResponse, error) {
	rsp, err := c.FindSecretsByLabels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSecretsByLabelsResponse(rsp)
}

// DeleteSecretWithResponse request returning *DeleteSecretResponse
func (c *ClientWithResponses) DeleteSecretWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error) {
	rsp, err := c.DeleteSecret(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretResponse(rsp)
}

// GetSecretByIdWithResponse request returning *GetSecretByIdResponse
func (c *ClientWithResponses) GetSecretByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSecretByIdResponse, error) {
	rsp, err := c.GetSecretById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretByIdResponse(rsp)
}

// UpdateSecretWithBodyWithResponse request with arbitrary body returning *UpdateSecretResponse
func (c *ClientWithResponses) UpdateSecretWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error) {
	rsp, err := c.UpdateSecretWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecretWithResponse(ctx context.Context, id string, body UpdateSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretResponse, error) {
	rsp, err := c.UpdateSecret(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretResponse(rsp)
}

// DecryptSecretByIdWithResponse request returning *DecryptSecretByIdResponse
func (c *ClientWithResponses) DecryptSecretByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DecryptSecretByIdResponse, error) {
	rsp, err := c.DecryptSecretById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecryptSecretByIdResponse(rsp)
}

// ParseListSecretsResponse parses an HTTP response from a ListSecretsWithResponse call
func ParseListSecretsResponse(rsp *http.Response) (*ListSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretsWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddSecretResponse parses an HTTP response from a AddSecretWithResponse call
func ParseAddSecretResponse(rsp *http.Response) (*AddSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindSecretsByLabelsResponse parses an HTTP response from a FindSecretsByLabelsWithResponse call
func ParseFindSecretsByLabelsResponse(rsp *http.Response) (*FindSecretsByLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindSecretsByLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretsWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSecretResponse parses an HTTP response from a DeleteSecretWithResponse call
func ParseDeleteSecretResponse(rsp *http.Response) (*DeleteSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SucessfulOperation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSecretByIdResponse parses an HTTP response from a GetSecretByIdWithResponse call
func ParseGetSecretByIdResponse(rsp *http.Response) (*GetSecretByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSecretResponse parses an HTTP response from a UpdateSecretWithResponse call
func ParseUpdateSecretResponse(rsp *http.Response) (*UpdateSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SecretWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDecryptSecretByIdResponse parses an HTTP response from a DecryptSecretByIdWithResponse call
func ParseDecryptSecretByIdResponse(rsp *http.Response) (*DecryptSecretByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecryptSecretByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecryptedSecret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
